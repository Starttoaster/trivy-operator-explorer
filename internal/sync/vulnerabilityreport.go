package sync

import (
	"fmt"
	"github.com/aquasecurity/trivy-operator/pkg/apis/aquasecurity/v1alpha1"
	"github.com/starttoaster/trivy-operator-explorer/internal/db"
	"github.com/starttoaster/trivy-operator-explorer/internal/kube"
	log "github.com/starttoaster/trivy-operator-explorer/internal/logger"
	"strings"
	"time"
)

// SyncVulnerabilityReports is the main sync job for the VulnerabilityReport kind
func SyncVulnerabilityReports() {
	firstRun := true
	for {
		if !firstRun {
			time.Sleep(5 * time.Minute)
		}
		firstRun = false

		list, err := kube.GetVulnerabilityReportList()
		if err != nil {
			log.Logger.Error("error fetching vulnerability report list for sync", "error", err)
			continue
		}

		if list != nil {
			// Each report is specific to an image found in a particular kube resource (statefulset/replicaset/etc) and namespace
			for _, report := range list.Items {
				data := parseReport(report)

				isSynced, err := isImageSynced(data.Registry, data.Repository, data.Tag, data.Digest)
				if err != nil {
					log.Logger.Error("error checking if image is synced", "error", err)
				}

				if !isSynced {

				}
			}
		}
	}
}

func isImageSynced(registry, repository, tag, digest string) (bool, error) {
	var count int
	err := db.Client.Get(&count, "SELECT COUNT(*) FROM images WHERE registry = ? AND repository = ? AND tag = ? AND sha = ?", registry, repository, tag, digest)
	if err != nil {
		return false, err
	}

	if count > 0 {
		return true, nil
	}
	return false, nil
}

/*
//
// Report Parsing Logic
//
*/

type parsedReport struct {
	// Image details
	Registry         string
	Repository       string
	Tag              string
	Digest           string
	OS               string
	EndOfServiceLife bool

	// Resource details
	ResourceName      string
	ResourceNamespace string
	ResourceKind      string
}

func parseReport(report v1alpha1.VulnerabilityReport) parsedReport {
	data := parsedReport{
		Registry:         report.Report.Registry.Server,
		Repository:       report.Report.Artifact.Repository,
		Tag:              report.Report.Artifact.Tag,
		Digest:           report.Report.Artifact.Digest,
		OS:               parseImageOS(report.Report),
		EndOfServiceLife: report.Report.OS.Eosl,

		ResourceName:      report.ObjectMeta.Labels["trivy-operator.resource.name"],
		ResourceNamespace: report.ObjectMeta.Labels["trivy-operator.resource.namespace"],
		ResourceKind:      report.ObjectMeta.Labels["trivy-operator.resource.kind"],
	}

	return data
}

func parseImageOS(report v1alpha1.VulnerabilityReportData) string {
	data := fmt.Sprintf("%s %s", report.OS.Family, report.OS.Name)
	data = strings.TrimPrefix(data, " ")
	data = strings.TrimSuffix(data, " ")
	return data
}
